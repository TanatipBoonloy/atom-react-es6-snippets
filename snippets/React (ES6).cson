'.source.js.jsx':
  # React Component
  'React ES6 Component':
    'prefix': 'rcc'
    'body': """
      import React, { Component } from 'react'

      class ${1:MyComponent} extends Component {
        render() {
          return (${2:<div>MyComponent</div>})
        }
      }

      export default ${1:MyComponent}

    """
  'React ES6 Component with Constructor':
    'prefix': 'rccp'
    'body': """
      import React, { Component } from 'react'
      import PropTypes from 'prop-types'

      class ${1:MyComponent} extends Component {
        constructor(props) {
          super(props)
        }

        render() {
          return (${2:<div></div>})
        }
      }

      ${1:MyComponent}.propTypes = {
      }

      ${1:MyComponent}.defaultProps = {
      }

      export default ${1:MyComponent}

    """
  'React ES6 Functional Component':
    'prefix': 'rsc'
    'body': """
      import React from 'react'

      const ${1:MyComponent} = () => ${2:{
        return (
          ${3:<div></div>}
        )
      }}

      export default ${1:MyComponent}

    """
  'React ES6 Functional Component':
    'prefix': 'rscp'
    'body': """
      import React from 'react'
      import PropTypes from 'prop-types'

      const ${1} = (props) => ${2:{
        return (
          ${3:<div></div>}
        )
      }}

      ${1}.propTypes = {
      }

      ${1}.defaultProps = {
      }

      export default ${1}

    """

  'React ES6 Constructor':
    'prefix': 'con'
    'body': """
      constructor(props) {
        super(props)
        ${1}
      }

    """

  # React Props & State
  'React ES6 props':
    'prefix': 'pr'
    'body': "${1:this.}props${2}"
  'React ES6 state':
    'prefix': 'st'
    'body': "this.state"
  'React ES6 setState':
    'prefix': 'sst'
    'body': "this.setState(${1:(prevState) => ()})"

  # React Component Lifecycle
  'React ES6 Component Did Mount':
    'prefix': 'cdm'
    'body': """
      componentDidMount() {
        ${1}
      }

    """
  'React ES6 Component Will Receive Props':
    'prefix': 'cwr'
    'body': """
      componentWillReceiveProps(nextProps) {
        ${1}
      }

    """
  'React ES6 Should Component Update':
    'prefix': 'scu'
    'body': """
      shouldComponentUpdate(nextProps, nextState) {
        ${1}
      }

    """
  'React ES6 Component Will Update':
    'prefix': 'cwup'
    'body': """
      componentWillUpdate(nextProps, nextState) {
        ${1}
      }

    """
  'React ES6 Component Did Update':
    'prefix': 'cdup'
    'body': """
      componentDidUpdate(prevProps, prevState) {
        ${1}
      }

    """
  'React ES6 Component Will Unmount':
    'prefix': 'cdun'
    'body': """
      componentWillUnmount() {
        ${1}
      }

    """

  'React ES6 bind method to this':
    'prefix': 'rbm',
    'body': """
      this.${1} = this.${1}.bind(this)
    """
  'React ES6 props definition':
    'prefix': 'pt',
    'body': """
      ${1}.propTypes = {
        ${2}
      }
    """
  'React ES6 default props value':
    'prefix': 'dp',
    'body': """
      ${1}.defaultProps = {
        ${2}
      }
    """

  # PropType string
  'React PropType string':
    'prefix': 'pts',
    'body': "PropTypes.string,${1}"
  'React PropType string required':
    'prefix': 'ptsr',
    'body': "PropTypes.string.isRequired,${1}"

  # PropType number
  'React PropType number':
    'prefix': 'ptn',
    'body': "PropTypes.number,${1}"
  'React PropType number required':
    'prefix': 'ptnr',
    'body': "PropTypes.number.isRequired,${1}"

  # PropType object
  'React PropType object':
    'prefix': 'pto',
    'body': "PropTypes.object,${1}"
  'React PropType object required':
    'prefix': 'ptor',
    'body': "PropTypes.object.isRequired,${1}"

  # PropType any
  'React PropType any':
    'prefix': 'ptan',
    'body': "PropTypes.any,${1}"
  'React PropType array required':
    'prefix': 'ptanr',
    'body': "PropTypes.any.isRequired,${1}"

  # PropType array
  'React PropType array':
    'prefix': 'pta',
    'body': "PropTypes.array,${1}"
  'React PropType array required':
    'prefix': 'ptar',
    'body': "PropTypes.array.isRequired,${1}"

  # PropType bool
  'React PropType bool':
    'prefix': 'ptb',
    'body': "PropTypes.bool,${1}"
  'React PropType bool required':
    'prefix': 'ptbr',
    'body': "PropTypes.bool.isRequired,${1}"

  # PropType element
  'React PropType element':
    'prefix': 'pte',
    'body': "PropTypes.element,${1}"
  'React PropType element required':
    'prefix': 'pter',
    'body': "PropTypes.element.isRequired,${1}"

  # PropType function
  'React PropType function':
    'prefix': 'ptf',
    'body': "PropTypes.func,${1}"
  'React PropType function required':
    'prefix': 'ptfr',
    'body': "PropTypes.func.isRequired,${1}"

  # PropType shape
  'React PropType shape':
    'prefix': 'ptsh',
    'body': """
      PropTypes.shape({
        ${1}
      }),
    """
  'React PropType shape required':
    'prefix': 'ptshr',
    'body': """
      PropTypes.shape({
        ${1}
      }).isRequired,
    """

  # Utils
  'React children PropType':
    'prefix': 'children',
    'body': "children: PropTypes.any,${1}"
